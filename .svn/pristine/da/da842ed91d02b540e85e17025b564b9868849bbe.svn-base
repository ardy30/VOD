package com.ppfuns.ui.view.player;

import android.app.Service;
import android.content.Context;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.Build;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.NonNull;
import android.util.AttributeSet;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.widget.RelativeLayout;

import com.ppfuns.model.entity.Play;
import com.ppfuns.model.entity.PlayerActions;
import com.ppfuns.ui.view.player.type.BPlayer;
import com.ppfuns.ui.view.player.type.PlayerType;
import com.ppfuns.util.BroadcastUtils;
import com.ppfuns.util.LogUtils;
import com.ppfuns.util.ToastUtils;
import com.ppfuns.vod.R;

/**
 * SuperVideoPlayer
 */
public class SuperVideoPlayers extends VideoPlayer {

    private final static String TAG = SuperVideoPlayers.class.getSimpleName();

    /**
     * 视频加载超时时长
     */
    private final static long TIMEOUTDEFAULT = 10000;

    /**
     * 视频缓冲超时时长
     */
    private final static int BUFFERING_TIME_OUT = 10000;

    /**
     * 自动隐藏进度条时长
     */
    public static int TIME_SHOW_CONTROLLER = 6000;

    private VideoViews mVideoView;//播放器
    private IMediaControl mMediaController;//控制器

    private View mProgressBarView;//加载中按钮
    private View mError_tips;
    private View mBtnRetry;

    private int mKeycode = KeyEvent.KEYCODE_DPAD_RIGHT; // 判断进度条快进还是快退
    private final int PLAYER_ACTIONS_TYPE = 11;

    private boolean mIsBuffing = false;  //是否在缓冲

    private int mBufferPercent;

    private boolean isSeek = false;

    /**
     * 是否自动播放
     */
    // TODO 暂时保留字段
    private boolean mAutoPlay = true;

    /**
     * 是否自动隐藏控制面板
     */
    private boolean mAutoHideController = true;

    /**
     * 播放器类型（时移？回看？）
     */
    private PlayerType mPlayerType;

    //加载超时
    private final int ERROR_TIME_OUT_FLAG = 0x0001;
    //缓冲超时
    private final int BUFFERING_TIME_OUT_FLAG = 0x0002;
    //加载圈
    private final int SHOW_LOADING_FLAG = 0x0003;
    //每秒增量计算时间
    private final int CUSTOM_PLAY_TIME_FLAG = 0x0004;
    //隐藏进度条
    private final int HIDE_CONTROLLER_FLAG = 0x0005;
    //进度条时间更新
    private final int UPDATE_PLAY_TIME_FLAG = 0x0006;

    private Handler mHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case ERROR_TIME_OUT_FLAG:
                    Log.e(TAG, "open video time out : Uri = " + mPlay);
                    hideProgressView();
                    mVideoPlayCallback.onError();
                    close();
                    break;
                case BUFFERING_TIME_OUT_FLAG:
                    ToastUtils.showLong(getContext(), "当前网络不佳");
                    break;
                case SHOW_LOADING_FLAG:
                    showProgressView(true);
                    break;
                case CUSTOM_PLAY_TIME_FLAG:
                    customPlayProgress();
                    resetCustomTimer();
                    break;
                case HIDE_CONTROLLER_FLAG:
                    hideController();
                    break;
                case UPDATE_PLAY_TIME_FLAG:
                    updatePlayProgress();
                    resetUpdateTimer();
                default:
                    break;
            }
        }
    };

    public SuperVideoPlayers(Context context) {
        this(context, null);
    }

    public SuperVideoPlayers(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context.getApplicationContext(), attrs, defStyleAttr);
        initView(context.getApplicationContext());
        initMediaController();
    }

    public SuperVideoPlayers(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }

    //TODO 保留
    public void setPlayerType(PlayerType mPlayerType) {
        this.mPlayerType = mPlayerType;
    }

    // TODO 保留
    public void setAutoPlay(boolean auto) {
        this.mAutoPlay = auto;
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        LogUtils.i(TAG, "KeyCode=" + keyCode);

        if (!(keyCode == KeyEvent.KEYCODE_VOLUME_UP) && !(keyCode == KeyEvent.KEYCODE_VOLUME_DOWN) && !mIsShowMenu) {
            showController();
            resetHideTimer();
        }

        if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT || keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {
            hideProgressView();
            mHandler.removeMessages(CUSTOM_PLAY_TIME_FLAG);
            if (!isSeek) {
                ((BPlayer) mPlayerType).setCustomCurrentTime(getCurrentPosition() - 1000);
                resetUpdateTimer();
                isSeek = true;
            }
            ((BPlayer) mPlayerType).seekChange(mMediaController, mVideoView, keyCode);
        } else if (keyCode != KeyEvent.KEYCODE_BACK && keyCode == KeyEvent.KEYCODE_DPAD_DOWN) {
            mMediaController.showRFControl();
        } else if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
            if (mIsBuffing) {
                return true;
            }
            this.mPlayerType.enter(mMediaControl, mVideoView, mPlay);
        }
        return super.onKeyDown(keyCode, event);
    }

    @Override
    public boolean onKeyUp(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT || keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {
            if (mPlayerType != null) {
                mKeycode = keyCode;
                mPlayerType.seekTo(mVideoView);
                mHandler.removeMessages(UPDATE_PLAY_TIME_FLAG);
                isSeek = false;
            }
        }
        return super.onKeyUp(keyCode, event);
    }

    private void customPlayProgress() {
        if (mPlayerType != null)
            mPlayerType.customPlayProgress();
    }

    @Override
    public long getCurrentPosition() {
        return mVideoView.getCurrentPosition();
    }

    @Override
    public void play() {
        mVideoView.start();
        if (mMediaController == null) {
            return;
        }
        ((BPlayer) mPlayerType).setCustomCurrentTime(getCurrentPosition() - 1000);
        resetHideTimer();
        resetCustomTimer();
        mHandler.removeMessages(UPDATE_PLAY_TIME_FLAG);
        if (mVideoPlayCallback != null) {
            mVideoPlayCallback.onStartPlay(mObject);
            actionsCollection(PlayerActions.PlayerStatus.STATUS_PLAY);
        }
        mMediaController.setPlayState(IMediaControl.PLAY);
    }

    @Override
    public void startPlayer(@NonNull String playUrl, long msec) {
        Play play = new Play();
        play.uri = playUrl;
        play.title = "";
        play.info = "";
        startPlayer(play, msec);
    }

    @Override
    public void startPlayer(@NonNull Play play, long msec) {
        mPlay = play;
        LogUtils.i(TAG, "videoTitle: " + mPlay.title + ", seekTime: " + msec);
        initBPlayer();
        setMediaListener();
        if (mError_tips.getVisibility() == VISIBLE) {
            mError_tips.setVisibility(GONE);
        }

        mMediaController.setInfoText(mPlay.info);
        mMediaController.setTitleText(mPlay.title);

        mVideoView.setVideoURI(Uri.parse(mPlay.uri));
        mVideoView.setVisibility(VISIBLE);

        mHandler.sendEmptyMessageDelayed(SHOW_LOADING_FLAG, 1000);
        mHandler.sendEmptyMessageDelayed(ERROR_TIME_OUT_FLAG, TIMEOUTDEFAULT);
        seekTo(msec);
    }

    /**
     * 暂停播放
     *
     * @param showSeekbar 是否显示控制条
     */
    @Override
    public void pause(boolean showSeekbar) {
        mVideoView.pause();
        if (showSeekbar) {
            showController();
        }
        mHandler.removeMessages(HIDE_CONTROLLER_FLAG);
        mHandler.removeMessages(CUSTOM_PLAY_TIME_FLAG);
        mHandler.removeMessages(UPDATE_PLAY_TIME_FLAG);
        ((BPlayer) mPlayerType).setCustomCurrentTime(getCurrentPosition() - 1000);
        if (mVideoPlayCallback != null) {
            mVideoPlayCallback.onPausePlay();
            actionsCollection(PlayerActions.PlayerStatus.STATUS_PAUSE);
        }
        mMediaController.setPlayState(IMediaControl.PAUSE);
    }

    @Override
    public void seekTo(long msec) {
        if (msec > 0) {
            mVideoView.pause();
        }
        mVideoView.seekTo((int) msec);
    }

    @Override
    public void seekTo(long msec, boolean showSeekBar) {
        if (showSeekBar) {
            showController();
        }
        seekTo(msec);
    }

    // 播放器控制条的回调函数
    private IMediaControl.ControlCallback mMediaControl = new IMediaControl.ControlCallback() {

        /**
         * 播放或暂停状态回调
         */
        @Override
        public void onPlayTurn() {
            LogUtils.i(TAG, "onPlayTurn");
            if (mVideoView.isPlaying()) {
                pause(true);
            } else {
                play();
            }
        }

        /**
         * 进度条回调
         * @param state    进度条状态
         * @param progress 进度
         */
        @Override
        public void onProgressTurn(@IMediaControl.ProgressState int state, int progress) {
            LogUtils.i(TAG, "onPlayTurn onProgressTurn");
            if (state == IMediaControl.START) {
//                mHandler.removeCallbacks(mHideController);
//                mHandler.postDelayed(mHideController, 0);
            } else if (state == IMediaControl.STOP) {
                resetHideTimer();
            } else {
                if (mMediaController == null) return;
                long allTime = mVideoView.getDuration() == 0 ? ((mDuration == 0) ? 0 : mDuration) : mVideoView.getDuration();
                int time = (int) ((float) progress * allTime / mMediaController.getProgressBarMax());
                seekTo(time);
                updatePlayTime();
            }
        }

        @Override
        public void handleCtrl() {
            LogUtils.i(TAG, "onPlayTurn handleCtrl");
//            showOrHideController(true);
            showController();
        }
    };

    private void startVideo() {
        mVideoView.start();
        mVideoPlayCallback.onStartPlay(mObject);
        mMediaController.setPlayState(IMediaControl.PLAY);
        mHandler.removeMessages(BUFFERING_TIME_OUT_FLAG);
        hideProgressView();
        ((BPlayer) mPlayerType).setCustomCurrentTime(getCurrentPosition() - 1000);
        resetCustomTimer();
        resetHideTimer();
//        resetUpdateTimer();
    }

    // 当MediaPlayer准备好后触发该回调
    private MediaPlayer.OnPreparedListener mOnPreparedListener = new MediaPlayer.OnPreparedListener() {
        @Override
        public void onPrepared(MediaPlayer mediaPlayer) {
            mDuration = mediaPlayer.getDuration();
            ((BPlayer) mPlayerType).setAllTime((int) mDuration);
            LogUtils.i(TAG + " mOnPreparedListener info", "OnPreparedListener");
            LogUtils.i(TAG, "duration: " + mDuration + ", timePostion: " + mPlay.timePosition);
            if (mediaPlayer != null) {
//                mediaPlayer.setOnBufferingUpdateListener(mOnBufferingUpdateListener);
                mediaPlayer.setOnSeekCompleteListener(mOnSeekCompleteListener);
            }
            mHandler.removeMessages(ERROR_TIME_OUT_FLAG);
            mHandler.sendEmptyMessageDelayed(BUFFERING_TIME_OUT_FLAG, BUFFERING_TIME_OUT);
            if (mPlay.timePosition <= 0) {
                startVideo();
                actionsCollection(PlayerActions.PlayerStatus.STATUS_PLAY);
            }
            SuperVideoPlayers.this.requestFocus();
            if (mIsShowAd) {
                hideController();
            } else {
                showController();
            }
        }
    };

    private MediaPlayer.OnSeekCompleteListener mOnSeekCompleteListener = new MediaPlayer.OnSeekCompleteListener() {
        @Override
        public void onSeekComplete(MediaPlayer mp) {
            LogUtils.i(TAG, "---------------MediaPlayer  onSeekComplete--------------");
            startVideo();
            LogUtils.d(TAG, "seek_status: " + mKeycode);
            if (mKeycode == KeyEvent.KEYCODE_DPAD_RIGHT) {
                actionsCollection(PlayerActions.PlayerStatus.STATUS_FORWARD);
            } else {
                actionsCollection(PlayerActions.PlayerStatus.STATUS_REWIND);
            }
        }
    };

    private MediaPlayer.OnErrorListener mOnErrorListener = new MediaPlayer.OnErrorListener() {
        @Override
        public boolean onError(MediaPlayer mp, int what, int extra) {
            LogUtils.i(TAG, " MediaPlayer mOnErrorListener " + " what = " + what + " \textra = " + extra);
            close();
            mVideoPlayCallback.onError();
            actionsCollection(PlayerActions.PlayerStatus.STATUS_ERROR);
//            mVideoPlayCallback.onCloseVideo();
            return true;
        }
    };

    private MediaPlayer.OnBufferingUpdateListener mOnBufferingUpdateListener = new MediaPlayer.OnBufferingUpdateListener() {
        @Override
        public void onBufferingUpdate(MediaPlayer mp, int percent) {
            mBufferPercent = percent * mp.getDuration();
        }
    };

    private MediaPlayer.OnInfoListener mOnInfoListener = new MediaPlayer.OnInfoListener() {
        public boolean onInfo(MediaPlayer mp, int what, int extra) {
            LogUtils.i(TAG, "MediaPlayer mOnInfoListener what= " + what + "\textra = " + extra);
            LogUtils.i(TAG, "mOnInfoListener _timePosition: " + getCurrentPosition());
            if (what == MediaPlayer.MEDIA_INFO_BUFFERING_START) {
                mIsBuffing = true;
                mHandler.removeMessages(CUSTOM_PLAY_TIME_FLAG);
                mHandler.removeMessages(UPDATE_PLAY_TIME_FLAG);
                mHandler.removeMessages(SHOW_LOADING_FLAG);
                mHandler.sendEmptyMessageDelayed(SHOW_LOADING_FLAG, 1000);

                resetBufferingTimer();
            } else if (what == MediaPlayer.MEDIA_INFO_BUFFERING_END) {
                mIsBuffing = false;
                startVideo();
            }
            return true;
        }
    };

    // 当MediaPlayer播放完成后触发该回调
    private MediaPlayer.OnCompletionListener mOnCompletionListener = new MediaPlayer.OnCompletionListener() {
        @Override
        public void onCompletion(MediaPlayer mediaPlayer) {
            LogUtils.i(TAG, "---------------MediaPlayer  mOnCompletionListener--------------");
            if (mMediaController != null) {
                mMediaController.playFinish(mVideoView.getDuration());
            }
            close();
            mVideoPlayCallback.onPlayFinish(mObject);
        }
    };

    public VideoPlayCallbackImpl getVideoPlayCallback() {
        return mVideoPlayCallback;
    }

    /**
     * 关闭视频
     */
    @Override
    public void close() {
        LogUtils.i(TAG, "close");
        mHandler.removeCallbacksAndMessages(null);
        if (mMediaController != null) {
            mMediaController.setPlayState(IMediaControl.PAUSE);
            hideController();
        }
//        mVideoView.pause();
        mVideoView.stopPlayback();
        mVideoView.setVisibility(GONE);
    }

    /**
     * 判断是否自动隐藏控制器
     */
    public boolean isAutoHideController() {
        return mAutoHideController;
    }

    public void setAutoHideController(boolean autoHideController) {
        mAutoHideController = autoHideController;
    }

    /**
     * 初始化View
     *
     * @param context
     */
    private void initView(Context context) {
        mContext = context;
        View.inflate(context, R.layout.super_vodeo_players_layout, this);
        mVideoView = (VideoViews) findViewById(R.id.video_view);
//        mMediaController = (MediaController) findViewById(R.id.controller);
        mProgressBarView = findViewById(R.id.progressbar);//加载中的那个圆圈
        mProgressBarView.setFocusable(false);
//        mProgressBarView.setBackgroundResource(R.color.transparent);
        mError_tips = findViewById(R.id.error_tips);
        mBtnRetry = findViewById(R.id.btn_retry);
    }

    @Override
    public void replay() {
        if (mVideoView == null) {
            return;
        }
        if (mIsShowAd) {
            hideController();
        } else {
            showController();
        }
        seekTo(0);
    }

    /**
     * 设置VideoView对播放器的监听
     */
    private void setMediaListener() {
        LogUtils.i(TAG, "setMediaListener");
        mVideoView.setOnErrorListener(mOnErrorListener);
        mVideoView.setOnPreparedListener(mOnPreparedListener);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
            mVideoView.setOnInfoListener(mOnInfoListener);
        }
        mVideoView.setOnCompletionListener(mOnCompletionListener);
    }

    private void actionsCollection(int status) {
        if (mContext == null || mDuration <= 0 || mPlay == null) {
            return;
        }
        PlayerActions actions = new PlayerActions();
        actions.serviceId = mPlay.albumId;
        actions.serviceName = mPlay.title;
        actions.columnID = mPlay.columnID;
        actions.duration = (int) mDuration;
        actions.restTime = (int) (mDuration - getCurrentPosition() / 1000);
        actions.status = status;
        actions.url = mPlay.uri;
        actions.serviceIndex = mPlay.index;
        BroadcastUtils.actionCollection(mContext, PLAYER_ACTIONS_TYPE, actions);
    }

    /**
     * 更新播放的缓冲进度时间
     */
    private void updatePlayTime() {
        mPlayerType.updatePlayTime(mVideoView);
    }

    /**
     * 更新播放进度时间
     */
    private void updatePlayProgress() {
        mPlayerType.updatePlayProgress(mVideoView);
    }

    /**
     * 显示loading圈
     *
     * @param isTransparentBg isTransparentBg
     */
    public void showProgressView(Boolean isTransparentBg) {
        LogUtils.d(TAG, "showProgressView");
        mProgressBarView.setVisibility(VISIBLE);
        mProgressBarView.bringToFront();
        if (!isTransparentBg) {
            mProgressBarView.setBackgroundResource(android.R.color.black);
        } else {
            mProgressBarView.setBackgroundResource(android.R.color.transparent);
        }
    }

    public void hideProgressView() {
        LogUtils.d(TAG, "hideProgressView");
        mHandler.removeMessages(SHOW_LOADING_FLAG);
        if (mProgressBarView != null && View.VISIBLE == mProgressBarView.getVisibility()) {
            mProgressBarView.setVisibility(INVISIBLE);
        }
    }

    public boolean isShowMediaController() {
        boolean isShowing = false;
        if (mMediaControl != null) {
            isShowing = mMediaController.isShowControl();
        }
        return isShowing;
    }

    /**
     * 进度条隐藏定时重置
     */
    private void resetHideTimer() {
//        if (!isAutoHideController()) return;
        LogUtils.i(TAG, "resetHideTimer");
        mHandler.removeMessages(HIDE_CONTROLLER_FLAG);
        mHandler.sendEmptyMessageDelayed(HIDE_CONTROLLER_FLAG, TIME_SHOW_CONTROLLER);
    }

    private void resetCustomTimer() {
        LogUtils.i(TAG, "resetCustomTimer");
        mHandler.removeMessages(CUSTOM_PLAY_TIME_FLAG);
        mHandler.sendEmptyMessageDelayed(CUSTOM_PLAY_TIME_FLAG, 1000);
    }

    private void resetUpdateTimer() {
        LogUtils.i(TAG, "resetUpdateTimer");
        mHandler.removeMessages(UPDATE_PLAY_TIME_FLAG);
        mHandler.sendEmptyMessageDelayed(UPDATE_PLAY_TIME_FLAG, 1000);
    }

    private void resetBufferingTimer() {
        LogUtils.i(TAG, "resetBufferingTimer");
        mHandler.removeMessages(BUFFERING_TIME_OUT_FLAG);
        mHandler.sendEmptyMessageDelayed(BUFFERING_TIME_OUT_FLAG, BUFFERING_TIME_OUT);
    }

    @Override
    protected void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        LogUtils.i(TAG, "onDetachedFromWindow");
        close();
    }

    @Override
    public long getDuration() {
        if (mDuration <= 0) {
            return 0;
        } else {
            return mDuration;
        }
    }

    @Override
    public boolean isPlaying() {
        return mVideoView.isPlaying();
    }

    @Override
    public void stop() {
        mHandler.removeCallbacksAndMessages(null);
        mPlayerType.init();
        mVideoView.stopPlayback();
        mVideoView.setVisibility(GONE);
    }

    public void setVolume(float volume) {
        AudioManager audioManager = (AudioManager) mContext.getSystemService(Service.AUDIO_SERVICE);
        int streamMaxVolume = audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
        audioManager.setStreamVolume(AudioManager.STREAM_MUSIC,
                (int) (volume * streamMaxVolume),
                AudioManager.FLAG_SHOW_UI);
    }

    private void initBPlayer() {
        mPlayerType = new BPlayer();
        ((BPlayer) mPlayerType).setSuperVideoPlayers(this);
        ((BPlayer) mPlayerType).setMediaController((MediaController) mMediaController);
        mMediaController.setProgressBarMax(1000);
    }

    private void initMediaController() {
        mMediaController = new MediaController(getContext());
        mMediaController.setProgressBarMax(PopupSeekBar.DEFAULT_MAX_SEEK_BAR);
        mMediaController.setMediaControl(mMediaControl);
        mMediaController.hideControl();
        LayoutParams lp = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
        lp.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
        addView((View) mMediaController, lp);
    }

    public void showController() {
        if (mMediaController.isShowControl()) {
            return;
        }
        mMediaController.showControl();
    }

    public void hideController() {
        mMediaController.hideControl();
    }
}